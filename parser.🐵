let loops = use("loops.üêµ")
let token = use("token.üêµ");
let lexer = use("lexer.üêµ");
let ast = use("ast.üêµ");

let while = loops.while;
let TokenType = token.TokenType;
let newLexer = lexer.newLexer

let Precedence = {
    "LOWEST": 0,
    "EQUALS": 5,
    "SUM": 7,
    "PRODUCT": 8,
    "MODULO": 9,
}

let precedences = {
    TokenType["EQ"]: Precedence["EQUALS"],
    TokenType["NOT_EQ"]: Precedence["EQUALS"],
    TokenType["PLUS"]: Precedence["SUM"],
    TokenType["MINUS"]: Precedence["SUM"],
    TokenType["SLASH"]: Precedence["PRODUCT"],
    TokenType["ASTERISK"]: Precedence["PRODUCT"],
    TokenType["MODULO"]: Precedence["MODULO"],
}

let newParser = fn(l) {
    let lexer = l;
    let errors = [];
    let currentToken = lexer.nextToken();
    let peekToken = lexer.nextToken();

    // TODO: Confirm placement is important and if this is the right spot for it
    let prefixParseFns = fn () {
        {
        TokenType["MINUS"]: parsePrefixExpression,
        TokenType["INT"]: parseIntegerLiteral,
        }
    }
    
    let infixParseFns = fn (){
        {
        TokenType["PLUS"]: parseInfixExpression,
        TokenType["MINUS"]: parseInfixExpression,
        TokenType["SLASH"]: parseInfixExpression,
        TokenType["ASTERISK"]: parseInfixExpression,
        TokenType["MODULO"]: parseInfixExpression,
        TokenType["EQ"]: parseInfixExpression,
        TokenType["NOT_EQ"]: parseInfixExpression,
        }
    }
    
    let nextToken = fn() {
        currentToken = peekToken;
        peekToken = lexer.nextToken()
    }

    let parseIntegerLiteral = fn() {
        let lit = ast.newIntegerLiteral(currentToken)
        lit["value"] = currentToken.literal
        return lit
    }

    let parseProgram = fn() {
        let program = ast.newProgram()
        let statements = program.statements
        while(fn(){currentToken.tokenType != "EOF"}, fn(){
            let stmt = parseStatement()
            if (stmt != null) {
                statements = append(statements, stmt)
            }
            nextToken()
        })
        program["statements"] = statements
        return program
    }

    let parseStatement = fn() {
        // TODO: implement comment, let, return statement parsing
        return parseExpressionStatement()
    }

    let parseExpressionStatement = fn() {
        let stmt = ast.newExpressionStatement(currentToken);
        stmt["expression"] = parseExpression(Precedence.LOWEST)

        if (peekTokenIs(TokenType.SEMICOLON)) {
            nextToken()
        }
        let exp = stmt.expression
        return stmt
    }
    
    let parseExpression = fn(precedence) {
        let prefix = prefixParseFns()[TokenType[currentToken.tokenType]]
        if (prefix == null) {
            puts("No prefix function found for token:", currentToken)
            noPrefixParseFnError(currentToken)
            return null;
        }

        let leftExp = prefix()

        while(fn(){!peekTokenIs(TokenType.SEMICOLON) && precedence < peekPrecedence()}, fn(){
            let infix = infixParseFns()[TokenType[peekToken.tokenType]]
            if (infix == null) {
                return null;
            }
            nextToken()
            leftExp = infix(leftExp)
        })
        return leftExp
        
    }

    let noPrefixParseFnError = fn(token) {
        errors = append(errors, "No prefixParse func for " + token.tokenType + " found." + token)
    }
   
    let parsePrefixExpression = fn() {

        let expression = ast.newPrefixExpression(currentToken, currentToken.literal);
        nextToken()
        expression["right"] = parseExpression(Precedence.PREFIX)
        return expression
    }

    let parseInfixExpression = fn(left) {
        let expression = ast.newInfixExpression(currentToken, currentToken.literal, left)
        let precedence = currentPrecedence()
        nextToken()
        expression["right"] = parseExpression(precedence)
        return expression
    }

    let peekPrecedence = fn() {
        let p = precedences[TokenType[peekToken.tokenType]]
        if (p != null) {
            return p
        } 
        Precedence.LOWEST
    }

    let currentPrecedence = fn() {
        let p = precedences[TokenType[currentToken.tokenType]]
        if (p != null) {
            return p
        } 
        Precedence.LOWEST
    }

    let peekTokenIs = fn(tokenType) {
        peekToken.tokenType == tokenType
    }

    return {
        "parseProgram": parseProgram
    }

}